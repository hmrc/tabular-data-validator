# Copyright 2015 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

validation-config {
   fieldInfo: [

  {
    column="A"
    cellName = "Worker forename"
    mandatory = true

    error: [ {
      id="error.3"
      errorMsg = "'Worker forename' must have an entry."
      validationID="B.e1"
      expr="!data.isEmpty()"
      errorId="003"
    }
    {
      id="error.4"
      errorMsg = "'Worker forename' must not start with a space."
      validationID="B.e2"
      expr="!data.startsWith(\" \")"
      errorId="004"
    }
    {
      id="error.6"
      errorMsg = "'Worker forename' can only include letters, a space, hyphen or apostrophe."
      validationID="B.e4"
      expr="characters(\"^[a-zA-Z]*$\", \"^[a-zA-Z-. ']*$\", data)"
      errorId="006"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="B"
    cellName = "Worker middle name"
    mandatory = false

    error: [ {
        id="error.7"
        errorMsg = "'Worker middle name' must not start with a space."
        validationID="C.e1"
        expr="!data.startsWith(\" \")"
        errorId="007"
      }
      {
        id="error.9"
        errorMsg = "'Worker middle name' can only include letters, a space, hyphen or apostrophe."
        validationID="C.e3"
        expr="characters(\"^[a-zA-Z]*$\", \"^[a-zA-Z-. ']*$\", data)"
        errorId="009"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="C"
    cellName = "Worker surname"
    mandatory = true

    error: [ {
      id="error.10"
      errorMsg = "'Worker surname' must have an entry."
      validationID="D.e1"
      expr="!data.isEmpty()"
      errorId="010"
    }
    {
      id = "error.11"
      errorMsg = "'Worker surname' must not start with a space."
      validationID = "D.e2"
      expr = "!data.startsWith(\" \")"
      errorId = "011"
    }

    {
      id="error.13"
      errorMsg = "'Worker surname' can only include letters, a space, hyphen or apostrophe."
      validationID="D.e4"
      expr="characters(\"^[a-zA-Z]*$\", \"^[a-zA-Z-. ']*$\", data)"
      errorId="013"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="D"
    cellName = "Worker date of birth"
    mandatory = false

    error: [ {
      id = "error.14"
      errorMsg = "'Worker date of birth' must have an entry."
      validationID = "E.e1"
      expr = "!data.isEmpty()"
      errorId = "014"
    }
    {
      id = "error.15"
      errorMsg = "'Worker date of birth' must not start with a space."
      validationID = "E.e2"
      expr = "!data.startsWith(\" \")"
      errorId = "015"
    }
    {
      id = "error.16"
      errorMsg = "'Worker date of birth' must be in the format of dd/mm/yyyy, like 12/11/1980 for 12 November 1980."
      validationID = "E.e3"
      expr = "data.trim().matches(\"(^(((0[1-9]|[12][0-8])[\\\\/](0[1-9]|1[012]))|((29|30|31)[\\\\/](0[13578]|1[02]))|((29|30)[\\\\/](0[4,6,9]|11)))[\\\\/](10|11|12|13|14|15|16|17|18|19|[2-9][0-9])\\\\d\\\\d$)|(^29[\\\\/]02[\\\\/](10|11|12|13|14|15|16|17|18|19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)\")"
      errorId = "016"

   }
    {
      id = "error.17"
      errorMsg = "'Worker date of birth' must be today or in the past."
      validationID = "E.e4"
      expr = "isPast(data, new java.util.Date())"
      errorId = "017"
    }
    {
      id = "error.18"
      errorMsg = "'Worker date of birth' must be less than 130 years ago."
      validationID = "E.e5"
      expr = "isDateValid(data)"
      errorId = "018"
    } ]
  }
  {
    column ="E"
    cellName = "Worker gender"
    mandatory = false

    error:[ {
      id = "error.19"
      errorMsg = "'Worker gender' must have an entry."
      validationID = "F.e1"
      expr = "!data.isEmpty()"
      errorId = "019"
    }
      {
        id = "error.20"
        errorMsg = "'Worker gender' must not start with a space."
        validationID = "F.e2"
        expr = "!data.startsWith(\" \")"
        errorId = "020"

      }
      {
        id = "error.21"
        errorMsg = "'Worker gender' must be either 'M' for male, or 'F' for female."
        validationID = "F.e3"
        expr = "data.trim().matches(\"[/M|F/]{1}\")"
        errorId = "021"
      } ]
  }
  {
    column = "F"
    cellName = "Worker National Insurance number"
    mandatory = false

    error:[ {
      id = "error.22"
      errorMsg = "'Worker National Insurance number' must not start with a space."
      validationID = "G.e1"
      expr = "!data.startsWith(\" \")"
      errorId = "022"
    }
    {
      id = "error.23"
      errorMsg = "'Worker National Insurance number' must be formatted as 2 letters then 6 numbers then A, B, C or D or a space, like QQ123456C or QQ123456 ."
      validationID = "G.e2"
      expr = "data.trim().matches(\"[/A-Za-z/]{2}[1-9]{6}[ABCDabcd ]{1}\") || !data.startsWith(\" \") && data.matches(\"[/A-Za-z/]{2}[1-9]{6}[ABCDabcd ]{1}\")"
      errorId = "023"
    } ]
  }
  {
    column="G"
    cellName = "Worker address line 1"
    mandatory = true

    error: [ {
      id="error.31"
      errorMsg = "'Worker address line 1' must have an entry."
      validationID="J.e1"
      expr="!data.isEmpty()"
      errorId="031"
    }
    {
      id="error.32"
      errorMsg = "'Worker address line 1' must not start with a space."
      validationID="J.e2"
      expr="!data.startsWith(\" \")"
      errorId="032"
    }
    {
      id="error.34"
      errorMsg = "'Worker address line 1' can include letters, numbers, and any symbol except | ` ¬ or ¦."
      validationID="J.e4"
      expr="data.matches(\"^[A-Za-z0-9 ~!\\\"@#$%&'()*+,-\\\\[\\\\].:;<=>?^_{}£\\\\\\\\€]*$\")"
      errorId="034"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="H"
    cellName = "Worker address line 2"
    mandatory = true

    error: [ {
      id="error.35"
      errorMsg = "'Address line 2' must have an entry."
      validationID="K.e1"
      expr="!data.isEmpty()"
      errorId="035"
    }
    {
      id="error.36"
      errorMsg = "'Worker address line 2' must not start with a space."
      validationID="K.e2"
      expr="!data.startsWith(\" \")"
      errorId="036"
    }
    {
      id="error.38"
      errorMsg = "'Worker address line 2' can include letters, numbers, and any symbol except | ` ¬ or ¦."
      validationID="K.e4"
      expr="data.matches(\"^[A-Za-z0-9 ~!\\\"@#$%&'()*+,-\\\\[\\\\].:;<=>?^_{}£\\\\\\\\€]*$\")"
      errorId="038"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="I"
    cellName = "Worker address line 3"
    mandatory = false

    error: [ {
      id="error.39"
      errorMsg = "'Worker address line 3' must not start with a space."
      validationID="L.e1"
      expr="!data.startsWith(\" \")"
      errorId="039"
    }
    {
      id="error.41"
      errorMsg = "'Worker address line 3' can include letters, numbers, and any symbol except | ` ¬ or ¦."
      validationID="L.e3"
      expr="data.matches(\"^[A-Za-z0-9 ~!\\\"@#$%&'()*+,-\\\\[\\\\].:;<=>?^_{}£\\\\\\\\€]*$\")"
      errorId="041"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="J"
    cellName = "Worker address line 4"
    mandatory = false


    error: [ {
      id="error.42"
      errorMsg = "'Worker address line 4' must not start with a space."
      validationID="M.e1"
      expr="!data.startsWith(\" \")"
      errorId="042"
    }
    {
      id="error.44"
      errorMsg = "'Worker address line 4' can include letters, numbers, and any symbol except | ` ¬ or ¦."
      validationID="M.e3"
      expr="data.matches(\"^[A-Za-z0-9 ~!\\\"@#$%&'()*+,-\\\\[\\\\].:;<=>?^_{}£\\\\\\\\€]*$\")"
      errorId="044"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="K"
    cellName = "Worker postcode"
    mandatory = true

    error: [ {
      id="error.45"
      errorMsg = "'Worker postcode' must not start with a space."
      validationID="N.e1"
      expr="!data.startsWith(\" \")"
      errorId="045"
    }
    {
      id="error.47"
      errorMsg = "'Worker postcode' can only include letters, numbers and a space."
      validationID="N.e3"
      expr="data.matches(\"^[A-Za-z0-9 ]*$\")"
      errorId="047"
    } ]

    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=10
        }
      }
    ]
  }
  {
    column="L"
    cellName = "Worker engagement details"
    mandatory = true

    error: [ {
      id = "error.48"
      errorMsg = "'Worker engagement details' must have an entry."
      validationID = "O.e1"
      expr = "!data.isEmpty()"
      errorId = "048"
    }
    {
      id = "error.49"
      errorMsg = "'Worker engagement details' must not start with a space."
      validationID = "O.e2"
      expr = "!data.startsWith(\" \")"
      errorId = "049"
    }
    {
      id = "error.50"
      errorMsg = "'Worker engagement details' must be 'A', 'B', 'C', 'D' or 'E'."
      validationID = "O.e3"
      expr = "data.trim().matches(\"[/A|B/|C/|D/|E/]{1}\")"
      errorId = "050"
    } ]
  }
  {
    column="M"
    cellName = "Worker unique taxpayer reference (UTR)"
    mandatory = false
    // functionality to be added as only mandatory when previous column (Worker Engagement Details) is A,B or C.

    error: [ {

      id = "error.52"
      errorMsg = "'Worker Unique Taxpayer Reference (UTR)' must not start with a space."
      validationID = "P.e2"
      expr = "!data.startsWith(\" \")"
      errorId = "052"
    }
    {
      id = "error.53"
      errorMsg = "'Worker Unique Taxpayer Reference (UTR)' must be 10 numbers."
      validationID = "P.e3"
      expr = "data.trim().matches(\"[0-9]{10}\")"
      errorId = "053"
    } ]
  }
  {
    column="N"
    cellName = "Start date of engagement"
    mandatory = true

    error: [ {
      id = "error.54"
      errorMsg = "'Start date of engagement' must have an entry."
      validationID = "Q.e1"
      expr = "!data.isEmpty()"
      errorId = "054"
    }
    {
      id = "error.55"
      errorMsg = "'Start date of engagement' must not start with a space."
      validationID = "Q.e2"
      expr = "!data.startsWith(\" \")"
      errorId = "055"
    }
    {
      id = "error.56"
      errorMsg = "'Start date of engagement' must be in the format of dd/mm/yyyy, like 10/03/2015 for 10 March 2015."
      validationID = "Q.e3"
      expr = "data.trim().matches(\"(^(((0[1-9]|[12][0-8])[\\\\/](0[1-9]|1[012]))|((29|30|31)[\\\\/](0[13578]|1[02]))|((29|30)[\\\\/](0[4,6,9]|11)))[\\\\/](10|11|12|13|14|15|16|17|18|19|[2-9][0-9])\\\\d\\\\d$)|(^29[\\\\/]02[\\\\/](10|11|12|13|14|15|16|17|18|19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)\")"
      errorId = "056"

    }
    {
      id = "error.57"
      errorMsg = "'Start date of engagement' must be today or in the past."
      validationID = "Q.e4"
      expr = "isPast(data, new java.util.Date())"
      errorId = "057"
    } ]
  }
  {
    column="O"
    cellName = "End date of engagement"
    mandatory = false

    error: [ {
      id = "error.58"
      errorMsg = "'End date of engagement' must not start with a space."
      validationID = "R.e1"
      expr = "!data.startsWith(\" \")"
      errorId = "058"
    }
    {
      id = "error.59"
      errorMsg = "'End date of engagement' must be in the format of dd/mm/yyyy, like 10/03/2015 for 10 March 2015."
      validationID = "R.e2"
      expr = "data.trim().matches(\"(^(((0[1-9]|[12][0-8])[\\\\/](0[1-9]|1[012]))|((29|30|31)[\\\\/](0[13578]|1[02]))|((29|30)[\\\\/](0[4,6,9]|11)))[\\\\/](10|11|12|13|14|15|16|17|18|19|[2-9][0-9])\\\\d\\\\d$)|(^29[\\\\/]02[\\\\/](10|11|12|13|14|15|16|17|18|19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)\")"
      errorId = "059"
    }
    {
      id = "error.60"
      errorMsg = "'End date of engagement' must be today or in the past."
      validationID = "R.e3"
      expr = "isPast(data, new java.util.Date())"
      errorId = "060"


    } ]


  }
  {
    column="P"
    cellName = "Amount paid for the worker's services"
    mandatory = true

    error: [ {
      id="error.64"
      errorMsg = "'Amount paid for the worker's services' must have an entry."
      validationID="T.e1"
      expr="!data.isEmpty()"
      errorId="064"
    }
    {
      id="error.65"
      errorMsg = "'Amount paid for the worker's services' must not start with a space."
      validationID="T.e2"
      expr="!data.startsWith(\" \")"
      errorId="065"
    }
    {
      id="error.67"
      errorMsg = "'Amount paid for the worker's services' must be a positive value with 2 decimal places, like 500.00 or 0.00 for zero pay. Amounts that are 1000 or more should not include commas, like 1789.45. You should round the value to the nearest penny."
      validationID="T.e4"
      expr="data.trim().matches(\"^\\\\d*\\\\.{1}\\\\d{2}$\")"
      errorId="067"
    }
    {
      id="error.68"
      errorMsg = "'Amount paid for the worker's services' cannot be more than 999999999.99."
      validationID="T.e5"
      expr="checkAmount(data)"
      errorId="068"
    } ]
  }
  {
    column="Q"
    cellName = "Currency"
    mandatory = true

    error: [ {
      id="error.69"
      errorMsg = "'Currency' must have an entry."
      validationID="U.e1"
      expr="!data.isEmpty()"
      errorId="069"
    }
      {
        id="error.70"
        errorMsg = "'Currency' must not start with a space."
        validationID="U.e2"
        expr="!data.startsWith(\" \")"
        errorId="070"
      }
      {
        id="error.71"
        errorMsg = "'Currency' must be pounds (GBP) or euros (EUR)."
        validationID="U.e3"
        expr="data.trim()matches(\"[/GBP|EUR/]{3}\")"
        errorId="071"
      } ]
  }
  {
    column="R"
    cellName = "Is this amount inclusive of VAT?"
    mandatory = true

    error: [ {
      id="error.72"
      errorMsg = "'Is this amount inclusive of VAT?' must have an entry."
      validationID="V.e1"
      expr="!data.isEmpty()"
      errorId="072"
    }
      {
        id="error.73"
        errorMsg = "'Is this amount inclusive of VAT?' must not start with a space."
        validationID="V.e2"
        expr="!data.startsWith(\" \")"
        errorId="073"
      }
      {
        id="error.74"
        errorMsg = "'Is this amount inclusive of VAT?' must be 'Y' for yes or 'N' for no."
        validationID="V.e3"
        expr="data.trim().matches(\"[/Y|N/]{1}\")"
        errorId="074"
      } ]
  }
  {
    column="S"
    cellName = "Name of party paid by intermediary for worker's services"
    mandatory = true

    error: [ {
      id="error.75"
      errorMsg = "'Name of party paid by intermediary for worker's services' must have an entry."
      validationID="W.e1"
      expr="!data.isEmpty()"
      errorId="075"
    }
    {
      id="error.76"
      errorMsg = "'Name of party paid by intermediary for worker's services' must not start with a space."
      validationID="W.e2"
      expr="!data.startsWith(\" \")"
      errorId="076"
    }
    {
      id = "error.78"
      errorMsg = "'Name of party paid by intermediary for worker's services' can include letters, numbers, and any symbol except | ` ¬ or ¦."
      validationID = "W.e4"
      expr = "data.matches(\"^[A-Za-z0-9 ~!\\\"@#$%&'()*+,-\\\\[\\\\].:;<=>?^_{}£\\\\\\\\€]*$\")"
      errorId = "078"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=120
        }
      }
    ]
  }
  {
    column="T"
    cellName = "Address line 1 of party paid by intermediary for worker's services"
    mandatory = true

    error: [ {
      id="error.79"
      errorMsg = "'Address line 1 of party paid by intermediary for worker's services' must have an entry."
      validationID="X.e1"
      expr="!data.isEmpty()"
      errorId="079"
    }
    {
      id="error.80"
      errorMsg = "'Address line 1 of party paid by intermediary for worker's services' must not start with a space."
      validationID="X.e2"
      expr="!data.startsWith(\" \")"
      errorId="080"
    }
    {
      id="error.82"
      errorMsg = "'Address line 1 of party paid by intermediary for worker's services' can include letters, numbers, and any symbol except | ` ¬ or ¦."
      validationID="X.e4"
      expr="data.matches(\"^[A-Za-z0-9 ~!\\\"@#$%&'()*+,-\\\\[\\\\].:;<=>?^_{}£\\\\\\\\€]*$\")"
      errorId="082"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="U"
    cellName = "Address line 2 of party paid by intermediary for worker's services"
    mandatory = true

    error: [ {
      id="error.83"
      errorMsg = "'Address line 2 of party paid by intermediary for worker's services' must have an entry."
      validationID="Y.e1"
      expr="!data.isEmpty()"
      errorId="083"
    }
    {
      id="error.84"
      errorMsg = "'Address line 2 of party paid by intermediary for worker's services' must not start with a space."
      validationID="Y.e2"
      expr="!data.startsWith(\" \")"
      errorId="084"
    }
    {
      id="error.86"
      errorMsg = "'Address line 2 of party paid by intermediary for worker's services' can include letters, numbers, and any symbol except | ` ¬ or ¦."
      validationID="Y.e4"
      expr="data.matches(\"^[A-Za-z0-9 ~!\\\"@#$%&'()*+,-\\\\[\\\\].:;<=>?^_{}£\\\\\\\\€]*$\")"
      errorId="086"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="V"
    cellName = "Address line 3 of party paid by intermediary for worker's services"
    mandatory = false

    error: [ {
      id="error.87"
      errorMsg = "'Address line 3 of party paid by intermediary for worker's services' must not start with a space."
      validationID="Z.e1"
      expr="!data.startsWith(\" \")"
      errorId="087"
    }
    {
      id="error.89"
      errorMsg = "'Address line 3 of party paid by intermediary for worker's services' can include letters, numbers, and any symbol except | ` ¬ or ¦."
      validationID="Z.e3"
      expr="data.matches(\"^[A-Za-z0-9 ~!\\\"@#$%&'()*+,-\\\\[\\\\].:;<=>?^_{}£\\\\\\\\€]*$\")"
      errorId="089"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="W"
    cellName = "Address line 4 of party paid by intermediary for worker's services"
    mandatory = false

    error: [ {
      id="error.90"
      errorMsg = "'Address line 4 of party paid by intermediary for worker's services' must not start with a space."
      validationID="AA.e1"
      expr="!data.startsWith(\" \")"
      errorId="090"
    }
    {
      id="error.92"
      errorMsg = "'Address line 4 of party paid by intermediary for worker's services' can include letters, numbers, and any symbol except | ` ¬ or ¦."
      validationID="AA.e3"
      expr="data.matches(\"^[A-Za-z0-9 ~!\\\"@#$%&'()*+,-\\\\[\\\\].:;<=>?^_{}£\\\\\\\\€]*$\")"
      errorId="092"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=35
        }
      }
    ]
  }
  {
    column="X"
    cellName = "Postcode of party paid by intermediary for worker's services"
    mandatory = false

    error: [ {
      id="error.93"
      errorMsg = "'Postcode of party paid by intermediary for worker's services' must not start with a space."
      validationID="AB.e1"
      expr="!data.startsWith(\" \")"
      errorId="093"
    }
    {
      id="error.95"
      errorMsg = "'Postcode of party paid by intermediary for worker's services' can only include letters, numbers and a space."
      validationID="AB.e3"
      expr="data.matches(\"^[A-Za-z0-9 ]*$\")"
      errorId="095"
    } ]
    ruleRef: [
      {
        id="length"
        parameters {
          min=1
          max=10
        }
      }
    ]
  },
  {
    column="Y"
    cellName = "Companies House registration number of party paid by intermediary for worker's services"
    mandatory = false // MANDATORY ONLY IF worker engagement details is D

    error: [ {

      id="error.97"
      errorMsg = "'Companies House registration number of party paid by intermediary for worker's services' must not start with a space."
      validationID="AC.e2"
      expr="!data.startsWith(\" \")"
      errorId="097"
    }
    {
      id="error.98"
      errorMsg = "'Companies House registration number of party paid by intermediary for worker's services' must be 2 letters then 6 numbers, or 8 numbers."
      validationID="AC.e3"
      expr="data.trim().matches(\"^[A-Za-z]{2}[0-9]{6}\") || data.trim().matches(\"^[0-9]{8}\")"
      errorId="098"
    } ]
  }
]



definitions {
  script : [



  ]
}

  group-rules:[
    {
      id="mandatoryD"
      errorId="002"
      columns:["D", "F"]
      expr="mandatoryD(dataD, dataF)"
      columnErrors: {
        "D":  {errorMsgTemplate = "'@{cellNameD}' must have an entry if '@{cellNameF}' is blank."}


      }
    }

  {
    id="mandatoryE"
    errorId="002"
    columns:["E", "F"]
    expr="mandatoryE(dataE, dataF)"
    columnErrors: {
      "E":  {errorMsgTemplate = "'@{cellNameE}' must have an entry if '@{cellNameF}' is blank."}


    }
  }

  {
    id="mandatoryM"
    errorId="002"
    columns:["L", "M"]
    expr="mandatoryM(dataL, dataM)"
    columnErrors: {
      "M": {errorMsgTemplate = "'@{cellNameM}' must have an entry when '@{cellNameL}' is 'A', 'B' or 'C'."}

    }
  }

  {
    id="mandatoryY"
    errorId="002"
    columns:["L", "Y"]
    expr="mandatoryY(dataL, dataY)"
    columnErrors: {
      "Y": {errorMsgTemplate = "There must be an entry for '@{cellNameY}' when '@{cellNameL}' is 'D'."}

    }
  }

  {
    id="validEndDate"
    errorId="003"
    columns:["N", "O"]
    expr="valEndDate(dataN, dataO)"
    columnErrors: {
      "O": {errorMsgTemplate = "'@{cellNameO}' must be the same as or after '@{cellNameN}'."}

    }
  }
  {
    id="validReportPeriod"
    errorId="004"
    columns:["N", "O"]
    expr="reportPeriod(dataN, dataO)"
    columnErrors: {
      "O": {errorMsgTemplate = "'@{cellNameO}' must be in the reporting period that the report relates to."}

    }
  }

  ]

rules: [
  {
    id="MANDATORY"
    errorId="002"
    errorMsgTemplate = "'@{cellName}' must have an entry."
    expr="notEmpty(data)"
  }
  {
    id="rulename"
    errorId="005"
    errorMsg = "Title is wrong"
    expr="data != null && data.length() > 0"
  }
  {
    id="length"
    errorId="006"
    errorMsgTemplate = "'@{cellName}' must be between @{min} and @{max} characters long."
    exprTemplate="data.length() >= @{min} && data.length() <= @{max}"
  }

]

}
